# Console

snippet cl "console.log" b
console.log($0);
endsnippet

# DOM

snippet qs "querySelector" b
${1:document}.querySelector('${2:selector}')
endsnippet

snippet qsa "querySelectorAll" b
${1:document}.querySelectorAll('${2:selector}')
endsnippet

snippet ae "addEventListener" b
${1:document}.addEventListener('${2:event}', ${3:function})
endsnippet

# Condition

snippet if "if" b
if (${1:condition}) {
	${0}
}
endsnippet

# Function

snippet fn "function" w
function ${1:name} (${2}) {
	${3}
}
endsnippet

snippet afn "anonymous function" i
function (${2}) {
	${3}
}
endsnippet

snippet afb "arrow function (body)" i
(${1}) => {
  ${2}
}
endsnippet

snippet afe "arrow function (expression)" i
(${1}) => ${2}
endsnippet

snippet me "prototype method" b
${1:class}.prototype.${2:function} = function(${3:params}) {
	$0
};
endsnippet

# Loop

snippet for "for" b
for (${1:var} i = 0; i < ${2:length}; i++) {
	${0}
}
endsnippet

snippet forin "for in" b
for (${1:var} ${2:key} in ${3:obj}) {
	${0}
}
endsnippet

snippet foreach "forEach" b
${1:array}.forEach((${2:item}) => {
	${0}
})
endsnippet

# Class

snippet cla "class definition" b
class ${1} {
  ${0}
}
endsnippet

snippet clex "class definition with extends" b
class ${1} extends ${2} {
  ${0}
}
endsnippet

# Module

snippet imp "imp" b
import ${2:`!p
def formatModuleName(path):
	lastPart = path.split('/')[-1]
	return lastPart

snip.rv = formatModuleName(t[1])
`} from '${1:path}'$0
endsnippet

# Node

snippet re "require" b
${2:const} ${3:`!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	return lastPart

snip.rv = formatVariableName(t[1])
`} = require('${1}');$0
endsnippet

snippet ex "module.exports" b
module.exports = ${1:`!p 
snip.rv = ''.join(x for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`};$0
endsnippet

# GSAP

snippet tw "TweenMax" b
TweenMax
endsnippet

snippet tl "TimelineMax" i
TimelineMax
endsnippet

snippet twt "TweenMax.to()" b
TweenMax.to(${1:elem}, ${2:0.8}, { ${3:vars });
endsnippet

snippet tws "TweenMax.set()" b
TweenMax.set(${1:elem}, { ${2:vars} });
endsnippet

snippet twdc "TweenMax.delayedCall()" b
TweenMax.delayedCall(${1:0.8}, ${2:function}, [], this);
endsnippet

snippet .to ".to()" i
.to(${1:elem}, ${2:0.8}, { ${3:vars} })
endsnippet

snippet .set ".set()" i
.set(${1:elem}, { ${2:vars} })
endsnippet
